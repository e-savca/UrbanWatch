@model Dictionary<string, string>
@using UrbanWatchMVCWebApp.Services;
@inject ITranzyAdapter tranzyAdapter

@{    
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Public Transport Map of Chisinau</h1>
    <p>
        Hello! We present to you the public transport map of Chisinau, which will help you plan your trip around the city. On the map, you will find all the trolleybus and bus routes, as well as their stops. Additionally, you can check the schedule and duration of the trip. Use this map to quickly and efficiently reach your destination.
    </p>
    <p>Thank you for using our service!</p>
    <form method="post">
        <p>
            <label for="tripId">Selectati o ruta:</label>
            <select name="tripId" asp-for="@Model["tripId"]">
            <option ></option>
                @{
                    Route[] getRoutes = await tranzyAdapter.GetRoutesAsync();
                    Trip[] getTrips = await tranzyAdapter.GetTripsAsync();
                }
                @foreach (Route route in getRoutes.OrderBy(order => order.Id).ToArray())
            {
                foreach (Trip trip in getTrips.Where(trip => trip.routeId == route.Id).OrderBy(order => order.directionId).ToArray())
                    {
                        <text>
                        <option value="@trip.tripId" >@route.routeShortName - Spre @trip.tripHeadsign </option>
                        </text>
                    }                
            }  
            </select>
       </p>
        <p>
            <input type="submit" value="Send" />
        </p>
    </form>

    <div id="map" style="height: 500px;"></div>
</div>


@section Scripts {
    <script>
        var map = L.map('map').setView([47.02543731466161, 28.830271935332686], 12);
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        @if (Model != null)
        {
            Stop[] getStops = await tranzyAdapter.GetStopsAsync(Model["shapeId"]);
            Vehicle[] getVehicles = await tranzyAdapter.GetVehiclesAsync(Model["tripId"]);
            Shape[] getShapes = await tranzyAdapter.GetShapesAsync(Model["shapeId"]);
            Route? routeObject = await tranzyAdapter.GetTheRouteAsync(Int32.Parse(Model["routeId"]));
            string? routeColor = routeObject.routeColor;
            foreach (Stop stop in getStops)
            {
                <text>
                    var busStopIcon = L.divIcon({ className: 'bus-stop-div-icon', iconSize: new L.Point(10, 10) });
                    var marker = L.marker([@stop.Latitude, @stop.Longitude], { icon: busStopIcon }).addTo(map);
                    marker.bindPopup('Statia: @stop.Name');
                </text>
            }
            foreach (Vehicle vehicle in getVehicles)
            {
                <text>
                    var busIcon = L.divIcon({ className: 'bus-div-icon', iconSize: new L.Point(20, 20)});
                    var marker = L.marker([@vehicle.Latitude, @vehicle.Longitude], { icon: busIcon }).addTo(map);
                    marker.bindPopup('Vehicul: @vehicle.Label Speed:@vehicle.Speed');
                </text>
            }

            List<string[]> shapesArray = new List<string[]>();

            foreach (Shape shape in getShapes)
            {                
                string[] point = new string[2];
                point[0] = shape.Latitude;
                point[1] = shape.Longitude;
                shapesArray.Add(point);
            }            
            <text>
                var shapes = @Html.Raw(Json.Serialize(shapesArray));
            var polyline = L.polyline(shapes, { color: '@routeColor' }).addTo(map);

            // zoom the map to the polyline
            map.fitBounds(polyline.getBounds());
            </text>
        }
    </script>
}
